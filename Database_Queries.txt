-- Sanshi E-COM Database Schema for Supabase (PostgreSQL)
-- Use this script in Supabase SQL Editor (New Query -> Paste -> Run)

-- 1) PRODUCTS
CREATE TABLE IF NOT EXISTS public.products (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  -- product name
  name text NOT NULL,
  -- short description used in cards
  short_description text,
  -- long description for product detail
  long_description text,
  -- price, stored with 2 decimal places
  price numeric(10,2) NOT NULL DEFAULT 0.00,
  currency text NOT NULL DEFAULT 'INR',
  -- SKU if client uses one
  sku text UNIQUE,
  -- flag if product is active / visible
  in_stock boolean DEFAULT true,
  -- featured for homepage / special listing
  is_featured boolean DEFAULT false,
  -- qty is optional (since you are only redirecting to marketplaces)
  inventory_count integer DEFAULT NULL,
  -- timestamps
  created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL
);
COMMENT ON TABLE public.products IS 'Store product metadata (for listing & redirect).';

-- 2) PRODUCT IMAGES
CREATE TABLE IF NOT EXISTS public.product_images (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_id bigint REFERENCES public.products(id) ON DELETE CASCADE,
  url text NOT NULL,         -- public or signed URL stored here
  alt_text text,
  position integer DEFAULT 0,  -- order of images
  created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL
);
COMMENT ON TABLE public.product_images IS 'Images for products; multiple images per product.';

-- 3) PRODUCT LINKS (marketplace redirects)
-- flexible table that allows adding more marketplaces later
CREATE TYPE marketplace_platform AS ENUM ('amazon', 'meesho', 'marketplace', 'flipkart', 'other');

CREATE TABLE IF NOT EXISTS public.product_links (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_id bigint REFERENCES public.products(id) ON DELETE CASCADE,
  platform marketplace_platform NOT NULL,
  url text NOT NULL,
  label text, -- optional label shown on button (e.g., "Buy on Amazon")
  created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL,
  CONSTRAINT unique_product_platform UNIQUE (product_id, platform)
);
COMMENT ON TABLE public.product_links IS 'Marketplace / external links for each product.';

-- 4) CONTACTS (contact form submissions)
CREATE TABLE IF NOT EXISTS public.contacts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  email text,
  message text NOT NULL,
  created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL
);
COMMENT ON TABLE public.contacts IS 'Contact form submissions from site visitors.';

-- 5) ADMINS (placeholder for admin auth)
CREATE TABLE IF NOT EXISTS public.admins (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email text UNIQUE NOT NULL,
  -- store only hashed_password; use bcrypt/argon2 in backend
  hashed_password text NOT NULL,
  role text DEFAULT 'admin',
  created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL
);
COMMENT ON TABLE public.admins IS 'Admin users (store hashed passwords only).';

-- 6) OPTIONAL: product_tags (if you want a simple way to tag/filter at scale)
CREATE TABLE IF NOT EXISTS public.tags (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS public.product_tags (
  product_id bigint REFERENCES public.products(id) ON DELETE CASCADE,
  tag_id bigint REFERENCES public.tags(id) ON DELETE CASCADE,
  PRIMARY KEY (product_id, tag_id)
);

COMMENT ON TABLE public.tags IS 'Optional tags for products (e.g., "new", "bestseller").';
COMMENT ON TABLE public.product_tags IS 'Join table for product <-> tag relationship.';

-- Indexes for faster queries
CREATE INDEX IF NOT EXISTS idx_products_name ON public.products USING gin (to_tsvector('english', coalesce(name,'') || ' ' || coalesce(short_description,'')));
CREATE INDEX IF NOT EXISTS idx_products_featured ON public.products(is_featured);


=======================================================================================================

-- Use a CTE (WITH clause) to insert products and capture their generated IDs in one go.
-- This avoids manually guessing IDs and prevents foreign key errors.

WITH new_products AS (
  INSERT INTO public.products (name, short_description, long_description, price, sku, is_featured)
  VALUES
    ('Pearl Drop Earrings', 'Classic pearl drop earrings, 1 pair', 'Elegant freshwater pearl drop earrings. Lead & nickel free.', 599.00, 'SNSH-TR-001', true),
    ('Floral Hairpin Set', 'Set of 3 floral hairpins', 'Decorative hairpins suitable for day & evening wear.', 249.00, 'SNSH-TR-002', false),
    ('Gold-Plated Necklace', 'Minimalist gold-plated necklace', 'A beautiful and simple necklace, perfect for everyday wear. Tarnish-resistant.', 899.00, 'SNSH-TR-003', true),
    ('Silver Charm Bracelet', 'Delicate silver bracelet with charms', 'Crafted from 925 sterling silver, this charm bracelet adds a touch of personality.', 1299.00, 'SNSH-TR-004', false)
  RETURNING id, sku
),
new_images AS (
  -- Now, insert images using the IDs we just got by looking up the SKU.
  INSERT INTO public.product_images (product_id, url, alt_text, "position")
  VALUES
    ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-001'), 'https://xeaayzewoemxbyrbzohn.supabase.co/storage/v1/object/public/product%20images/Pearl%20Drop%20Earrings%20front%20view.jpg', 'Pearl Drop Earrings front view', 0),
    ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-001'), 'https://xeaayzewoemxbyrbzohn.supabase.co/storage/v1/object/public/product%20images/Pearl%20Drop%20Earrings%20lifestyle.jpg', 'Pearl Drop Earrings lifestyle shot', 1), -- Fixed: added missing alt_text
    ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-002'), 'https://xeaayzewoemxbyrbzohn.supabase.co/storage/v1/object/public/product%20images/Floral%20hairpin%20set.jpg', 'Floral hairpin set', 0),
    ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-003'), 'https://xeaayzewoemxbyrbzohn.supabase.co/storage/v1/object/public/product%20images/Gold-Plated%20Necklace%20with%20pendant.jpg', 'Gold-Plated Necklace with pendant', 0),
    ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-004'), 'https://xeaayzewoemxbyrbzohn.supabase.co/storage/v1/object/public/product%20images/Silver%20Charm%20Bracelet%20on%20wrist.jpg', 'Silver Charm Bracelet on wrist', 0),
    ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-004'), 'https://xeaayzewoemxbyrbzohn.supabase.co/storage/v1/object/public/product%20images/Silver%20Charm%20Bracelet%20product%20shot.jpg', 'Silver Charm Bracelet product shot', 1)
)
-- Finally, insert the product links, again using the IDs from our CTE.
INSERT INTO public.product_links (product_id, platform, url, label)
VALUES
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-001'), 'amazon', 'https://amzn.in/d/cucpGJC', 'Buy on Amazon'),
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-001'), 'meesho', 'https://amzn.in/d/cucpGJC', 'Buy on Meesho'),
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-001'), 'marketplace', 'https://amzn.in/d/gzNJPIl', 'View on Marketplace'),
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-002'), 'amazon', 'https://amzn.in/d/0q5HabT', 'Buy on Amazon'),
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-003'), 'amazon', 'https://amzn.in/d/another-link', 'Buy on Amazon'),
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-003'), 'meesho', 'https://amzn.in/d/another-link-2', 'Buy on Meesho'),
  ((SELECT id FROM new_products WHERE sku = 'SNSH-TR-004'), 'marketplace', 'https://amzn.in/d/4qnCxYM', 'View on Marketplace');

-- Your contact form insert is correct and can be run as is.
INSERT INTO public.contacts (name, email, message)
VALUES ('Test User', 'test@example.com', 'This is a sample message from the contact form.');